% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ipd_db.R
\name{mac_lookup}
\alias{mac_lookup}
\title{Encode an ambiguous HLA typing into a Multiple Allele Code (MAC)}
\usage{
mac_lookup(ard, allele)
}
\arguments{
\item{ard}{The Python database connection object created by \code{\link[=db_initialize]{db_initialize()}}}

\item{allele}{A string or character vector with (an) HLA allele(s).}
}
\value{
A string or character vector of the same length as \code{allele},
with the corresponding MACs.
}
\description{
\code{mac_lookup()} is a thin wrapper around the \code{ard.lookup_mac()} method of the
\href{https://github.com/nmdp-bioinformatics/py-ard}{\code{py-ard}} Python package.

See the \href{https://hml.nmdp.org/MacUI/}{NMDP website} for more on MACs.
}
\details{
Uses the \href{https://www.ebi.ac.uk/ipd/imgt/hla/}{IPD-IMGT/HLA database} as
initialized with \code{\link[=db_initialize]{db_initialize()}}. This function will throw an error if any
of the alleles in the input do not exist in the database. Use
\code{\link[=is_in_ipd_db]{is_in_ipd_db()}} to safely check if the allele(s) exist(s).
}
\examples{
\dontrun{
ard <- db_initialize(data_dir = "~/ipd_db/")
mac_lookup(ard, "A*01:01/A*01:02")
#> "A*01:AB"
mac_lookup(ard, "HLA-A*25:01/HLA-A*26:01")
#> "HLA-A*25:BYHR"
# Also works for vectors:
mac_lookup(ard, c("A*01:01/A*01:02", "A*25:01/A*26:01"))
#> "A*01:AB"   "A*25:BYHR"
}
}
\seealso{
\code{\link[=mac_decode]{mac_decode()}} for the reverse operation
}
