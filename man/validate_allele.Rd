% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_allele.R
\name{validate_allele}
\alias{validate_allele}
\title{Check whether an HLA typing is well-formed}
\usage{
validate_allele(allele)
}
\arguments{
\item{allele}{A string or character vector with (an) HLA allele(s).}
}
\value{
A Boolean or logical vector with the same lengths as \code{allele}, with
\code{TRUE} or \code{FALSE} for each element.
}
\description{
\code{validate_allele()} takes in a character vector or string of HLA alleles, and
returns \code{TRUE} if the allele is well-formed, and \code{FALSE} if it isn't.
}
\details{
N.B. This function does \emph{not} test whether an allele actually exists (e.g.
whether it occurs in the most recent version of the IPD-IMGT/HLA database),
but only whether it's string representation conforms to certain standards. An
allele can be well-formed but not exist (e.g. \code{"A*99:01:01"}), or can exist
but not be well-formed (e.g. \code{"HLA-A**02;01"}).

The following are explicitly considered valid HLAs:
\itemize{
\item alleles belonging to loci A, B, C, DRA/DRB, DQA/DQB, DPA/DPB (which is
\emph{not} an exhaustive list of class I or class II HLAs, but simply the ones
that are often typed in the context of transplantation research/matching)
\item serological/antigen notation, such as \code{"A2"}, \code{"DP-0201"}
\item XX codes, e.g. \code{"A*02:XX"}
\item prefixing an allele with \code{"HLA-"} is allowed
\item ambiguous alleles such as \code{"C*01:02/C*01:03/C*01:04/C*01:05/C*01:06"}
\item Multiple Allele Codes, e.g. \code{"DRB1*07:GC"} (v2) or \code{"DPB1*04BDVU"} (v3)
\item P groups, G groups, and expression-related suffixes (N/L/S/C/A/Q)
}
}
\examples{
validate_allele("A2")
validate_allele("A*99:01:01") # well-formed but non-existing
validate_allele("HLA-A**02;01") # existing but not well-formed

# also works with character vectors, or in a data frame
allele_vec <- c("A2", "A*01:AABJE", "A*24:02:01:02L", "not-an-HLA")
validate_allele(allele_vec)

df <- tidyr::tibble(alleles = allele_vec)
dplyr::mutate(df, alleles_check = validate_allele(alleles))
}
