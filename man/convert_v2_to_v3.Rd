% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_hla.R
\name{convert_v2_to_v3}
\alias{convert_v2_to_v3}
\title{Translates HLA alleles in v2 notation to v3}
\usage{
convert_v2_to_v3(allele)
}
\arguments{
\item{allele}{A string or character vector of HLA alleles}
}
\value{
A vector with the same length as \code{allele}, with all v2 alleles
converted to v3
}
\description{
The pre-2010 "v2" notation does not include the field delimiters (\code{:}) that
are now mandatory in v3. This function first tests if an allele is in v2
format; if an allele is not in v2 format; it's left alone. But if it is, it
looks up its v2 equivalent in the \link{v2_to_v3} lookup table. If it is not in
the table, a v3 version is put together heuristically, by inserting \code{:} after
every two digits.
}
\details{
N.B. The heuristic prediction will not work in all cases. For example:
\itemize{
\item \verb{DPB1*87801N} should be \verb{DPB1*878:01N} (but is output as \verb{DPB1*87:801N})
\item \code{DPB1*152401} should be \code{DPB1*1524:01} (but is output as \code{DPB1*15:24:01})
}

In general it's not possible to make this work purely syntactically without
imbuing knowledge on which HLA alleles exist and which do not. For example,
should \code{DRB1*1412601} be \code{14:126:01} or \code{14:12:601}? Both are theoretically
possible. However, alleles with > 2 digits per field are rare, and were not
really around before 2010, so in practice one should rarely encounter them in
v2 format.
}
\examples{
convert_v2_to_v3("A*01010101") # known v2 allele
convert_v2_to_v3("B*0701") # not a known v2 allele, but heuristic works
convert_v2_to_v3("B*9526") # known allele where heuristic would not work
}
\seealso{
\code{\link[=convert_deleted]{convert_deleted()}} to lookup new designations for deleted/changed
alleles
}
\keyword{internal}
