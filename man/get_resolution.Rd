% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resolution.R
\name{get_resolution}
\alias{get_resolution}
\title{Determine the level of resolution of an HLA-allele}
\usage{
get_resolution(allele, extended = FALSE)
}
\arguments{
\item{allele}{A string or character vector with (an) HLA allele(s).}

\item{extended}{When \code{TRUE}, the returned resolution also contains:
\itemize{
\item for high resolution: the number of fields ("second field", "third field",
"fourth field")
\item for intermediate resolution: whether the allele is a list ("CAL") or a
multiple allele code ("MAC")
\item for low resolution: whether the allele is a serological/molecular
split/broad or
\href{https://hla.alleles.org/antigens/broads_splits.html}{associated antigen}
}}
}
\value{
A string or character vector of the same length as \code{allele},
with \code{"low"}, \code{"intermediate"}, or \code{"high"} for each element.
}
\description{
\code{get_resolution()} takes in a string or character vector of HLA alleles, and
returns their resolution as either low, intermediate, or high.
}
\details{
Resolution is defined as follows:
\itemize{
\item \strong{Low}: a typing at the allele group level, such as
\itemize{
\item anything using the serological/antigen nomenclature, e.g \code{A2}
\item an XX code representing an allele group, e.g. \code{A*02:XX}
}
\item \strong{Intermediate}: any typing with ambiguities, such as
\itemize{
\item a typing with multiple allele codes (MAC), e.g. \code{A*01:AABJE}
\item an allele list using the forward slash notation (CAL),
e.g. \code{HLA-A*23:26/HLA-A*23:39}
}
\item \strong{High}: any typing with more than 2 field codes, e.g.
\itemize{
\item \code{A*24:09} (minimum)
\item \code{HLA-A*24:02:01:02L} (maximum)
}
}
}
\examples{
get_resolution("A2") # low
get_resolution("A2", extended = TRUE) # low - broad
get_resolution("A*01:AABJE") # intermediate
get_resolution("A*01:AABJE", extended = TRUE) # intermediate - MAC
get_resolution("A*24:09") # high
get_resolution("A*24:09", extended = TRUE) # high - second field

# also works with character vectors, or in a data frame
allele_vec <- c("A2", "A*01:AABJE", "B*42:08")
get_resolution(allele_vec)

tidyr::tibble(alleles = allele_vec) |>
  dplyr::mutate(resolution = get_resolution(allele_vec))

}
