[{"path":"https://lcreteig.github.io/hlapro/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 hlapro authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lcreteig.github.io/hlapro/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Leon Reteig. Author, maintainer. UMC Utrecht. Copyright holder, funder.","code":""},{"path":"https://lcreteig.github.io/hlapro/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Reteig L (2024). hlapro: Tools Work HLA Typings Single-Antigen Bead Assays. R package version 0.3.0.9000, https://lcreteig.github.io/hlapro/, https://github.com/lcreteig/hlapro.","code":"@Manual{,   title = {hlapro: Tools to Work with HLA Typings and Single-Antigen Bead Assays},   author = {Leon Reteig},   year = {2024},   note = {R package version 0.3.0.9000,     https://lcreteig.github.io/hlapro/},   url = {https://github.com/lcreteig/hlapro}, }"},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"hlapro-","dir":"","previous_headings":"","what":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"goal hlapro provide tooling work Human Leukocyte Antigen (HLA) data, context transplantation research: HLA typings single bead assays (e.g. Luminex) detecting HLA-antibodies package currently still (heavy) development, ultimately goal support following functionality: Obtaining HLA mismatches transplant donor recipient Formatting GL Strings Downscaling (reducing) typing resolution Upscaling (imputing) typing resolution, based haplotype frequency tables Determining beads assay positive, based automated implementations different methods Assessing presence donor-specific antibodies (DSA)","code":""},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"can install development version hlapro GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"lcreteig/hlapro\")"},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"","code":"library(hlapro)"},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"mismatches","dir":"","previous_headings":"Usage > Typings","what":"Mismatches","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Get mismatched HLAs donor recipient typings","code":"donor_typing <- \"A1 A2 B5\" recipient_typing <- \"A1 A3 B5 B12\"  get_mismatches(donor_typing, recipient_typing) #> [1] \"A2\""},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"extracting-alleles","dir":"","previous_headings":"Usage > Typings","what":"Extracting alleles","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Extract HLA alleles typing string ’s two alleles given locus typing, ’ll receive warning: Use count_alleles() easily inspect number alleles per locus:","code":"typing <- \"A1 A2 B7 B8 Cw3 DQ5 DQ8 DR4 DR11 DR52 DR53\" extract_alleles_str(typing) #>    A_1    A_2    B_1    B_2    C_1    C_2 DPA1_1 DPA1_2 DPB1_1 DPB1_2 DQA1_1  #>    \"1\"    \"2\"    \"7\"    \"8\"    \"3\"     NA     NA     NA     NA     NA     NA  #> DQA1_2 DQB1_1 DQB1_2 DRB1_1 DRB1_2 DRB._1 DRB._2  #>     NA    \"5\"    \"8\"    \"4\"   \"11\"   \"52\"   \"53\"  df <- tidyr::tibble(typing = \"A1 A2 B7 B8 Cw3 DQ5 DQ8 DR4 DR11 DR52 DR53\") extract_alleles_df(df, typing, loci = c(\"A\", \"B\", \"C\")) #> Joining with `by = join_by(typing)` #> Joining with `by = join_by(typing)` #> # A tibble: 1 × 7 #>   typing                                     A_1   A_2   B_1   B_2   C_1   C_2   #>   <chr>                                      <chr> <chr> <chr> <chr> <chr> <chr> #> 1 A1 A2 B7 B8 Cw3 DQ5 DQ8 DR4 DR11 DR52 DR53 1     2     7     8     3     \"\" typing <- \"A1 A2 A3 B7 B8 Cw1\" extract_alleles_str(typing) #> Warning: One or more loci found with more than 2 alleles. #> ✖ `extract_alleles_str()` will only pick the first two. #> ℹ Use `hlapro::count_alleles()` to find out more. #>    A_1    A_2    B_1    B_2    C_1    C_2 DPA1_1 DPA1_2 DPB1_1 DPB1_2 DQA1_1  #>    \"1\"    \"2\"    \"7\"    \"8\"    \"1\"     NA     NA     NA     NA     NA     NA  #> DQA1_2 DQB1_1 DQB1_2 DRB1_1 DRB1_2 DRB._1 DRB._2  #>     NA     NA     NA     NA     NA     NA     NA count_alleles(typing) #>    A    B    C DPA1 DPB1 DQA1 DQB1 DRB1 DRB.  #>    3    2    1    0    0    0    0    0    0"},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"cleaning-allele-strings","dir":"","previous_headings":"Usage > Typings","what":"Cleaning allele strings","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Correcting common formatting issues clean_hla() can also convert typings pre-2010 (v2) nomenclature updated (v3) nomenclature:","code":"allele_vec <- c(   \" A'*1 \", # spurious whitespace, punctuation, no leading zero, missing XX code   \"A10(25)\", # redundant typing (includes both split and broad)   \"C*03:01/02\" # locus and allele group left off in ambiguity )  clean_hla(allele_vec) #> [1] \"A*01:XX\"         \"A25\"             \"C*03:01/C*03:02\" clean_hla(c(\"Cw*030205\", \"A*2416\", \"DPB1*02BYVD\", \"B*35UMU\")) #> [1] \"C*03:02:05\"   \"A*31:08\"      \"DPB1*02:FNWG\" \"B*35:WRE\""},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"validating-alleles","dir":"","previous_headings":"Usage > Typings","what":"Validating alleles","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Check whether alleles well-formed","code":"validate_allele(c(\"A2\", \"A*01:AABJE\", \"A*24:02:01:02L\", \"not-an-HLA\")) #> [1]  TRUE  TRUE  TRUE FALSE"},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"allele-resolution","dir":"","previous_headings":"Usage > Typings","what":"Allele resolution","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Determine whether allele low/intermediate/high resolution Use extended mode get information:","code":"get_resolution(c(\"A2\", \"A*01:AABJE\", \"B*42:08\")) #> [1] \"low\"          \"intermediate\" \"high\" get_resolution(c(\"A2\", \"A*24:XX\", \"A*01:AB\", \"B*42:08\", \"A*01:01:01:01\"),   extended = TRUE ) #> [1] \"serology - broad\"    \"molecular - split\"   \"intermediate\"        #> [4] \"high - second field\" \"high - fourth field\""},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"downscaling-to-serological-equivalents","dir":"","previous_headings":"Usage > Typings","what":"Downscaling to serological equivalents","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Get serological equivalents allele defined ETRL HLA conversion tables Also supports lookup broads splits specifically: whether allele Bw4 Bw6 epitope:","code":"get_serology(c(\"B*15:79N\", \"B*15:YETY\", \"B*15:01:16\", \"B*15:02\", \"B*15:85\")) #> [1] NA    \"B15\" \"B62\" \"B75\" \"B15\" alleles <- c(\"A*01:01\", \"A*25:76:02\") get_split(alleles) #> [1] NA    \"A25\" splits <- c(\"A24\", \"A*25:76:02\") get_broad(splits) #> [1] \"A9\"  \"A10\" b_s <- c(\"B14\", \"B63\", \"B*40:05\", \"A*01:01\") get_public(b_s) #> [1] \"Bw6\" \"Bw4\" \"Bw6\" NA"},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"upscaling-from-serological-equivalents-to-2-field-high-resolution","dir":"","previous_headings":"Usage > Typings","what":"Upscaling from serological equivalents to 2-field high resolution","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Depends haplotype frequencies released NMDP, must downloaded logging accepting license. Also able upscale multiple typings , instance dataframe:","code":"upscale_typings(   filepath = \"~/Downloads/A~C~B~DRB3-4-5~DRB1~DQB1.xlsx\",   typing = \"A24 A28 B35 B61 DR4 DR11\" ) |>   dplyr::select(unphased_geno, dplyr::starts_with(\"haplo\")) #> # A tibble: 2 × 5 #>   unphased_geno              haplo_freq_1 haplo_freq_2 haplo_rank_1 haplo_rank_2 #>   <chr>                             <dbl>        <dbl>        <dbl>        <dbl> #> 1 A*24:02g A*68:01g B*35:03…    0.000585     0.000209           240          665 #> 2 A*24:02g A*68:01g B*35:03…    0.0000849    0.0000597         1565         2058 typing_df <- tidyr::tibble(   id = c(\"001\", \"002\"),   input_typings = c(     \"A24 A28 B35 B61 DR4 DR11\",     \"A2 A3 B52 B35 Cw4 DR11 DR52 DQ3\"   ) ) typing_df |>   dplyr::mutate(geno_df = upscale_typings(     \"~/Downloads/A~C~B~DRB3-4-5~DRB1~DQB1.xlsx\",     input_typings,     as_list = TRUE   )) |>   tidyr::unnest(geno_df) #> # A tibble: 6 × 13 #>   id    input_typings id_unphased_geno unphased_geno unphased_freq unphased_prob #>   <chr> <chr>                    <int> <chr>                 <dbl>         <dbl> #> 1 001   A24 A28 B35 …              364 A*24:02g A*6…  0.000000254          0.121 #> 2 001   A24 A28 B35 …              364 A*24:02g A*6…  0.000000254          0.121 #> 3 002   A2 A3 B52 B3…               17 A*02:01g A*0…  0.0000000542         0.151 #> 4 002   A2 A3 B52 B3…               17 A*02:01g A*0…  0.0000000542         0.151 #> 5 002   A2 A3 B52 B3…               17 A*02:01g A*0…  0.0000000542         0.151 #> 6 002   A2 A3 B52 B3…               17 A*02:01g A*0…  0.0000000542         0.151 #> # ℹ 7 more variables: multiplier <dbl>, phased_freq <dbl>, phased_prob <dbl>, #> #   haplo_freq_1 <dbl>, haplo_freq_2 <dbl>, haplo_rank_1 <dbl>, #> #   haplo_rank_2 <dbl>"},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"converting-to-and-from-gl-strings","dir":"","previous_headings":"Usage > Typings","what":"Converting to and from GL Strings","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Typing data often comes data frame like : Use df_to_gl() convert individual allele columns single GL String: Use gl_to_df() go opposite way: dataframe GL Strings one columns per allele:","code":"typing_df <- tidyr::tibble(   id = c(\"001\", \"002\"),   A_1 = c(\"A*01:01\", \"A*02:01\"), A_2 = c(\"A*03:01\", \"A*29:02\"),   B_1 = c(\"B*08:01\", \"B*07:02\"), B_2 = c(\"B*07:02\", NA_character_),   C_1 = c(\"C*07:01\", \"C*05:01\"), C_2 = c(\"C*07:02\", NA_character_) ) typing_df #> # A tibble: 2 × 7 #>   id    A_1     A_2     B_1     B_2     C_1     C_2     #>   <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1 001   A*01:01 A*03:01 B*08:01 B*07:02 C*07:01 C*07:02 #> 2 002   A*02:01 A*29:02 B*07:02 <NA>    C*05:01 <NA> typing_df_gl <- typing_df |>   dplyr::group_by(id) |> # convert each typing to its own GL String   df_to_gl() typing_df_gl #> # A tibble: 2 × 2 #>   id    glstring                                                                 #>   <chr> <chr>                                                                    #> 1 001   hla#2024-11-27#HLA-A*01:01+HLA-A*03:01^HLA-B*07:02+HLA-B*08:01^HLA-C*07… #> 2 002   hla#2024-11-27#HLA-A*02:01+HLA-A*29:02^HLA-B*07:02^HLA-C*05:01 typing_df_gl |>   dplyr::mutate(gl_df = gl_to_df(glstring)) |>   tidyr::unnest(gl_df) #> # A tibble: 2 × 11 #>   id    glstring      glstring_index namespace version_or_date A_1   A_2   B_1   #>   <chr> <chr>                  <int> <chr>     <chr>           <chr> <chr> <chr> #> 1 001   hla#2024-11-…              1 hla       2024-11-27      HLA-… HLA-… HLA-… #> 2 002   hla#2024-11-…              2 hla       2024-11-27      HLA-… HLA-… HLA-… #> # ℹ 3 more variables: B_2 <chr>, C_1 <chr>, C_2 <chr>"},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"looking-up-eplets-and-alleles","dir":"","previous_headings":"Usage > Typings","what":"Looking up eplets and alleles","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Grab database HLA Eplet registry use lookup eplets occur HLA allele, vice versa. common use case lookup eplets occur set (positive) Luminex beads:","code":"df_eplets <- load_eplet_registry() #> Loaded Eplet Registry table (NA), #> released 2024-08-19, downloaded from https://www.epregistry.com.br lookup_alleles(df_eplets, \"17S\") #> $`17S` #> [1] \"A*01:02\" \"A*30:01\" \"A*30:02\" lookup_eplets(df_eplets, \"A*01:02\") #> $`A*01:02` #>  [1] \"9S\"         \"17S\"        \"44KM\"       \"62QE\"       \"62QE+56G\"   #>  [6] \"65RA\"       \"65RNA\"      \"66N\"        \"66NH\"       \"66NM\"       #> [11] \"71HS\"       \"76ANT\"      \"77N[ABC]\"   \"77NGT\"      \"79GT\"       #> [16] \"79GT+90D\"   \"80T\"        \"80TL\"       \"90D\"        \"95I\"        #> [21] \"97I\"        \"99Y\"        \"109F\"       \"114R\"       \"116D\"       #> [26] \"138MI\"      \"138MI+79GT\" \"144K\"       \"144KR\"      \"144KR+151H\" #> [31] \"149AH\"      \"151H\"       \"152A\"       \"152HA\"      \"156R\"       #> [36] \"163R\"       \"163RG\"      \"166DG\"      \"193PI\"      \"275EL\" df_eplets <- load_eplet_registry() #> Loaded Eplet Registry table (NA), #> released 2024-08-19, downloaded from https://www.epregistry.com.br luminex_df <- dplyr::tribble(   ~sampleID, ~allele, ~positive,   \"001\", \"A*01:01\", TRUE,   \"001\", \"A*02:01\", FALSE,   \"002\", \"A*01:01\", FALSE ) get_positive_eplets(luminex_df, sampleID, allele, positive, df_eplets) #> # A tibble: 28 × 2 #>    sampleID eplets_pos #>    <chr>    <chr>      #>  1 001      44KM       #>  2 001      62QE       #>  3 001      62QE+56G   #>  4 001      65RNA      #>  5 001      66N        #>  6 001      66NH       #>  7 001      66NM       #>  8 001      76ANT      #>  9 001      77N[ABC]   #> 10 001      77NGT      #> # ℹ 18 more rows"},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"parsing-raw-luminex-files","dir":"","previous_headings":"Usage > Antibodies","what":"Parsing raw Luminex files","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Parse .csv files Luminex Single-Antigen Bead (SAB) assays, along lot-specific .eds file came kit, produce interpreted results identical Immucor’s MATCH !® Antibody Analysis Software:","code":"# path to some mock data (originally for testing purposes) lum_path <- testthat::test_path(\"luminex\")  # parse the files read_lum_csv(   csv_filepath = file.path(lum_path, \"LSA1-test.csv\"),   lots_path = lum_path # folder with .eds file ) #> Joining with `by = join_by(Location, Sample, antigen_id)` #> Joining with `by = join_by(Location, Sample, antigen_id)` #> Joining with `by = join_by(Sample, antigen_id)` #> Joining with `by = join_by(antigen_id)` #> Joining with `by = join_by(antigen_id)` #> Joining with `by = join_by(Location, Sample)` #> Joining with `by = join_by(antigen_id)` #> # A tibble: 12 × 18 #>    Sample Count antigen_id Cutoff  Median mfi_lra assignment bg_adjusted ad_mfi #>    <chr>  <int> <chr>       <dbl>   <dbl>   <dbl> <chr>            <dbl>  <dbl> #>  1 S001      67 103          3.75  8002.   127.   Positive        7822.  6713.  #>  2 S001     104 PC          NA    18206.    36.3  Negative       16706.  4551.  #>  3 S001      87 NC          NA      161      1    Negative          NA     NA   #>  4 S001      73 104          4.01    63      1    Negative        -107     52.1 #>  5 S001      89 105          3.79   127      1    Negative         -53     97.4 #>  6 S001      60 106          3.49   501      1    Negative         256    634.  #>  7 S002     120 PC          NA    17573    158.   Negative       16073   4393.  #>  8 S002      74 104          4.01    92.5    1.34 Negative         -77.5   76.4 #>  9 S002      92 NC          NA      113      1    Negative          NA     NA   #> 10 S002      82 103          3.75    69      1    Negative        -111     57.9 #> 11 S002     113 105          3.79   120      1    Negative         -60     92.0 #> 12 S002      78 106          3.49   112.     1    Negative        -134.   141.  #> # ℹ 9 more variables: ad_bg_adjusted <dbl>, A <chr>, B <chr>, C <chr>, #> #   Bw <chr>, A_serology <chr>, B_serology <chr>, C_serology <chr>, RAD <dbl>"},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"other-packages","dir":"","previous_headings":"","what":"Other packages","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"’s many implementations partly overlapping goals (hlapro might depend future). hlatools provides access IPD-IMGT/HLA database hlaR cleaning imputation HLA typings immunotation formats HLA typings can work haplotype/allele frequencies py-ard reduces HLA typing resolution pyglstring checks whether GL Strings well formatted ALLAN converts serological molecular HLA notation","code":""},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"why-hlapro","dir":"","previous_headings":"","what":"Why hlapro?","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"package developed mainly use PROCARE project, (among others) aims profile (HLA-)antibodies role kidney transplant rejection. hlapro aims one-stop shop analyses second iteration PROCARE.","code":""},{"path":"https://lcreteig.github.io/hlapro/index.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Tools to Work with HLA Typings and Single-Antigen Bead Assays","text":"Package logo made hexmake; Icon Freepik.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/clean_hla.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct the format of HLA alleles — clean_hla","title":"Correct the format of HLA alleles — clean_hla","text":"clean_hla() takes string character vector HLA alleles, performs number cleaning steps correct common issues formatting.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/clean_hla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct the format of HLA alleles — clean_hla","text":"","code":"clean_hla(allele)"},{"path":"https://lcreteig.github.io/hlapro/reference/clean_hla.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct the format of HLA alleles — clean_hla","text":"allele string character vector () HLA allele(s).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/clean_hla.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct the format of HLA alleles — clean_hla","text":"string character vector length allele, cleaned-alleles (originals, cleaning necessary).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/clean_hla.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correct the format of HLA alleles — clean_hla","text":"clean_hla() performs following operations, order: Removes leading trailing whitespace Adds leading zero fields necessary (*1:1 –> *01:01) Removes redundant \"versions\" allele (e.g. broad split also specified). See strip_redundant() Removes punctuation symbols part notation Adds \":XX\" suffix molecular alleles 1 field (*01 –> *01:XX) Propagates loci allele group fields ambiguities (*01:01/02 –> *01:01/*01:02) Converts v2 v3 (*01010102N –> *01:01:01:02N). See convert_v2_to_v3()","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/clean_hla.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct the format of HLA alleles — clean_hla","text":"","code":"clean_hla(\" A'*1 \") #> [1] \"A*01:XX\" clean_hla(\"A25(10)\") #> [1] \"A25\" clean_hla(\"C*03:01/02\") #> [1] \"C*03:01/C*03:02\""},{"path":"https://lcreteig.github.io/hlapro/reference/convert_v2_to_v3.html","id":null,"dir":"Reference","previous_headings":"","what":"Translates HLA alleles in v2 notation to v3 — convert_v2_to_v3","title":"Translates HLA alleles in v2 notation to v3 — convert_v2_to_v3","text":"pre-2010 \"v2\" notation include field delimiters (:) now mandatory v3. function first tests allele v2 format; allele v2 format; left alone. , looks v2 equivalent v2_to_v3 lookup table. table, v3 version put together heuristically, inserting : every two digits.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/convert_v2_to_v3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translates HLA alleles in v2 notation to v3 — convert_v2_to_v3","text":"","code":"convert_v2_to_v3(allele)"},{"path":"https://lcreteig.github.io/hlapro/reference/convert_v2_to_v3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translates HLA alleles in v2 notation to v3 — convert_v2_to_v3","text":"allele string character vector HLA alleles","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/convert_v2_to_v3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translates HLA alleles in v2 notation to v3 — convert_v2_to_v3","text":"vector length allele, v2 alleles converted v3","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/convert_v2_to_v3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translates HLA alleles in v2 notation to v3 — convert_v2_to_v3","text":"N.B. heuristic prediction work cases. example: DPB1*87801N DPB1*878:01N (output DPB1*87:801N) DPB1*152401 DPB1*1524:01 (output DPB1*15:24:01) general possible make work purely syntactically without imbuing knowledge HLA alleles exist . example, DRB1*1412601 14:126:01 14:12:601? theoretically possible. However, alleles > 2 digits per field rare, really around 2010, practice one rarely encounter v2 format.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/convert_v2_to_v3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translates HLA alleles in v2 notation to v3 — convert_v2_to_v3","text":"","code":"convert_v2_to_v3(\"A*01010101\") # known v2 allele #> [1] \"A*01:01:01:01\" convert_v2_to_v3(\"B*0701\") # not a known v2 allele, but heuristic works #> [1] \"B*07:01\" convert_v2_to_v3(\"B*9526\") # known allele where heuristic would not work #> [1] \"B*15:126\""},{"path":"https://lcreteig.github.io/hlapro/reference/count_alleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of alleles for each locus in an HLA typing string — count_alleles","title":"Count the number of alleles for each locus in an HLA typing string — count_alleles","text":"count_alleles() takes character vector string HLA typings, returns number alleles string contains locus. can useful validating whether typing string contains typing locus. Also, function can alert typing string contains two alleles locus, can intentional (e.g. typing contains broad split) mistake.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/count_alleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of alleles for each locus in an HLA typing string — count_alleles","text":"","code":"count_alleles(   typings,   loci = c(\"A\", \"B\", \"C\", \"DPA1\", \"DPB1\", \"DQA1\", \"DQB1\", \"DRB1\", \"DRB.\") )"},{"path":"https://lcreteig.github.io/hlapro/reference/count_alleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of alleles for each locus in an HLA typing string — count_alleles","text":"typings (n) (character vector ) HLA typing string(s). loci string character vector loci interested . alleles returned. Defaults . DRB. used DRB3, DRB4, DRB5.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/count_alleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of alleles for each locus in an HLA typing string — count_alleles","text":"(list ) named integer vector(s), loci names, number found alleles per locus values.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/count_alleles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of alleles for each locus in an HLA typing string — count_alleles","text":"","code":"typing <- \"A1 A2 B7 B8 Cw3 DQ5 DQ8 DR4 DR11 DR52 DR53\" count_alleles(typing, loci = \"A\") #> A  #> 2  count_alleles(typing) #>    A    B    C DPA1 DPB1 DQA1 DQB1 DRB1 DRB.  #>    2    2    1    0    0    0    2    2    2   # Also works with character vectors typing <- c(\"A1 A2 B7 B8 Cw3\", \"Cw3 Cw7\", NA) count_alleles(typing, loci = c(\"A\", \"B\", \"C\")) #> [[1]] #> A B C  #> 2 2 1  #>  #> [[2]] #> A B C  #> 0 0 2  #>  #> [[3]] #>  A  B  C  #> NA NA NA  #>"},{"path":"https://lcreteig.github.io/hlapro/reference/df_to_gl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert multiple columns of HLA allele typings to a single-column GL String — df_to_gl","title":"Convert multiple columns of HLA allele typings to a single-column GL String — df_to_gl","text":"df_to_gl() takes data frame HLA typings, summarizes columns single column GL Strings.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/df_to_gl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert multiple columns of HLA allele typings to a single-column GL String — df_to_gl","text":"","code":"df_to_gl(   df,   namespace = \"hla\",   version_or_date = NULL,   col_typing = \"glstring\",   loci = c(\"A\", \"B\", \"C\", \"DPA1\", \"DPB1\", \"DQA1\", \"DQB1\", \"DRB1\", \"DRB.\"),   suffixes = c(\"1\", \"2\"),   sep = \"_\" )"},{"path":"https://lcreteig.github.io/hlapro/reference/df_to_gl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert multiple columns of HLA allele typings to a single-column GL String — df_to_gl","text":"df dataframe HLA typings. names HLA typing column follow format {locus}{sep}{suffix}, e.g. \"A_1\" \"DPB1_2\". namespace Specification HLA nomenclature system. Defaults \"hla\". version_or_date Specification version namespace used, date GL String constructed. specified, uses today's date default. col_typing name new column GL Strings. loci string character vector loci interested . alleles returned. Defaults . DRB. used DRB3, DRB4, DRB5. suffixes differentiates alleles locus (defaults \"1\" \"2\") column names. sep separates loci suffixes column names.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/df_to_gl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert multiple columns of HLA allele typings to a single-column GL String — df_to_gl","text":"dataframe amount rows, columns typings individual alleles replaced single GL String.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/df_to_gl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert multiple columns of HLA allele typings to a single-column GL String — df_to_gl","text":"","code":"# Make a dataframe following the default naming scheme, with two typings df_in <- tidyr::tibble(   id = c(\"001\", \"002\"),   A_1 = c(\"A*01:01\", \"A*03:01\"),   A_2 = c(NA, \"A*02:01\"),   B_1 = c(\"B*07:01\", \"B*07:02\"),   B_2 = c(\"B*08:01\", \"B*08:02\"),   C_1 = c(\"C*01:01\", \"C*01:02\"),   C_2 = c(\"C*03:04\", NA) ) df_in |>   dplyr::group_by(id) |> # make one GL string for each typing   df_to_gl() #> # A tibble: 2 × 2 #>   id    glstring                                                                 #>   <chr> <chr>                                                                    #> 1 001   hla#2024-12-02#HLA-A*01:01^HLA-B*07:01+HLA-B*08:01^HLA-C*01:01+HLA-C*03… #> 2 002   hla#2024-12-02#HLA-A*02:01+HLA-A*03:01^HLA-B*07:02+HLA-B*08:02^HLA-C*01…"},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_hla.html","id":null,"dir":"Reference","previous_headings":"","what":"ETRL HLA Tables — etrl_hla","title":"ETRL HLA Tables — etrl_hla","text":"EuroTransplant Reference Laboratory tables Human Leukocyte Antigen alleles. can used lookup tables get serological equivalent given allele.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_hla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ETRL HLA Tables — etrl_hla","text":"","code":"etrl_hla"},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_hla.html","id":"etrl-hla","dir":"Reference","previous_headings":"","what":"etrl_hla","title":"ETRL HLA Tables — etrl_hla","text":"data frame 737 rows 4 columns: Allele HLA allele (modern allele notation) ET MatchDeterminantSplit serological equivalent split level ET MatchDeterminantBroad serological equivalent broad level Public Bw4 Bw6 (allele epitope)","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_hla.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ETRL HLA Tables — etrl_hla","text":"https://etrl.eurotransplant.org/resources/hla-tables/","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rows with serological equivalents of an HLA allele from ETRL HLA table — etrl_lookup","title":"Get rows with serological equivalents of an HLA allele from ETRL HLA table — etrl_lookup","text":"etrl_lookup() takes string character vector HLA alleles, returns serological equivalents defined ETRL HLA tables.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rows with serological equivalents of an HLA allele from ETRL HLA table — etrl_lookup","text":"","code":"etrl_lookup(allele)"},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rows with serological equivalents of an HLA allele from ETRL HLA table — etrl_lookup","text":"allele string character vector () HLA allele(s).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rows with serological equivalents of an HLA allele from ETRL HLA table — etrl_lookup","text":"data frame many rows elements input, four columns: allele looked (NA exist) equivalent serological split level (NA one) equivalent serological broad level (NA one) Whether allele public epitope (Bw4 Bw6) (NA )","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/etrl_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rows with serological equivalents of an HLA allele from ETRL HLA table — etrl_lookup","text":"","code":"allele_vec <- c(   \"B15\", \"B*15:79N\", \"B*15:YETY\",   \"B*15:01:16\", \"B*15:02\", \"B*15:85\" ) etrl_lookup(allele_vec) #> # A tibble: 6 × 4 #>   Allele  `ET MatchDeterminantSplit` `ET MatchDeterminantBroad` Public #>   <chr>   <chr>                      <chr>                      <chr>  #> 1 NA      NA                         NA                         NA     #> 2 NA      NA                         NA                         NA     #> 3 B*15:XX NA                         B15                        NA     #> 4 B*15:01 B62                        B15                        Bw6    #> 5 B*15:02 B75                        B15                        Bw6    #> 6 B*15:XX NA                         B15                        NA"},{"path":"https://lcreteig.github.io/hlapro/reference/extract_alleles_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Split an HLA typing string into alleles — extract_alleles_str","title":"Split an HLA typing string into alleles — extract_alleles_str","text":"Takes space-separated HLA typing string splits constituent loci alleles (\"A_1\", \"A_2\", \"DRB1_1\"). extract_alleles_str() takes single string, returns named character vector alleles. extract_alleles_df() takes data frame, one column contains typing string, returns data frame along new column allele.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/extract_alleles_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split an HLA typing string into alleles — extract_alleles_str","text":"","code":"extract_alleles_str(   string,   loci = c(\"A\", \"B\", \"C\", \"DPA1\", \"DPB1\", \"DQA1\", \"DQB1\", \"DRB1\", \"DRB.\"),   strip_locus = TRUE )  extract_alleles_df(   df,   col_typing,   loci = c(\"A\", \"B\", \"C\", \"DPA1\", \"DPB1\", \"DQA1\", \"DQB1\", \"DRB1\", \"DRB.\"),   strip_locus = TRUE )"},{"path":"https://lcreteig.github.io/hlapro/reference/extract_alleles_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split an HLA typing string into alleles — extract_alleles_str","text":"string String, space-separated HLA typing. loci string character vector loci interested . alleles returned. Defaults . DRB. used DRB3, DRB4, DRB5. strip_locus Include locus output remove ? TRUE (default), locus removed extracted alleles. FALSE, retain locus original typing. df data frame. col_typing column df contains space-separated HLA typing string row.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/extract_alleles_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split an HLA typing string into alleles — extract_alleles_str","text":"Either character vector data frame named alleles. warning shown loci input two alleles.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/extract_alleles_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split an HLA typing string into alleles — extract_alleles_str","text":"","code":"typing <- \"A1 A2 B7 B8 Cw3 DQ5 DQ8 DR4 DR11 DR52 DR53\" extract_alleles_str(typing, loci = \"A\") #> A_1 A_2  #> \"1\" \"2\"  extract_alleles_str(typing) #>    A_1    A_2    B_1    B_2    C_1    C_2 DPA1_1 DPA1_2 DPB1_1 DPB1_2 DQA1_1  #>    \"1\"    \"2\"    \"7\"    \"8\"    \"3\"     NA     NA     NA     NA     NA     NA  #> DQA1_2 DQB1_1 DQB1_2 DRB1_1 DRB1_2 DRB._1 DRB._2  #>     NA    \"5\"    \"8\"    \"4\"   \"11\"   \"52\"   \"53\"   df <- tidyr::tibble(typing = typing) extract_alleles_df(df, typing, loci = c(\"A\", \"B\", \"C\")) #> Joining with `by = join_by(typing)` #> Joining with `by = join_by(typing)` #> # A tibble: 1 × 7 #>   typing                                     A_1   A_2   B_1   B_2   C_1   C_2   #>   <chr>                                      <chr> <chr> <chr> <chr> <chr> <chr> #> 1 A1 A2 B7 B8 Cw3 DQ5 DQ8 DR4 DR11 DR52 DR53 1     2     7     8     3     \"\"     # Can also handle newer nomenclature extract_alleles_str(\"DQB1*03:01 DQB1*05:01 DRB1*04:AMR\",   loci = c(\"DRB1\", \"DQB1\") ) #>   DRB1_1   DRB1_2   DQB1_1   DQB1_2  #> \"04:AMR\"       NA  \"03:01\"  \"05:01\""},{"path":"https://lcreteig.github.io/hlapro/reference/get_broad.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","title":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","text":"get_broad() takes string character vector HLA alleles. corresponding broad-level allele looked etrl_hla returned. allele exists, NA returned instead.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_broad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","text":"","code":"get_broad(allele)"},{"path":"https://lcreteig.github.io/hlapro/reference/get_broad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","text":"allele string character vector () HLA allele(s).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_broad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","text":"string character vector length allele, corresponding broad exists, NA none exists.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_broad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","text":"function uses EuroTransplant Reference Laboratory HLA (etrl_hla) tables lookup. tables define several alleles protein (e.g. HLA-*01:01, HLA-*01:02), serological equivalents. others grouped XX code (HLA-*01:XX), also mapped serological equivalent.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_broad.html","id":"workings","dir":"Reference","previous_headings":"","what":"Workings","title":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","text":"entered alleles first reduced two-field level (see reduce_to_nth_field()). reduced allele occurs lookup table, corresponding rows returned. , converted XX code, row returned. allele already serological broad- split-level, lookup performed using respective columns etrl_hla.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_broad.html","id":"exceptions","dir":"Reference","previous_headings":"","what":"Exceptions","title":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","text":"allele suffix (e.g. HLA-C*01:37N), serological equivalent, hence also return nothing.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/get_broad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve broad-level serological equivalent of an HLA-allele — get_broad","text":"","code":"get_broad(\"A24\") # returns corresponding broad (\"A9\") #> [1] \"A9\" get_broad(\"A9\") # is already a broad, returns itself (\"A9\") #> [1] \"A9\"  # these alleles in modern nomenclature also all return \"A9\" get_broad(\"A*24\") #> [1] \"A9\" get_broad(\"A*24:XX\") #> [1] \"A9\" get_broad(\"A*24:02:01:102\") #> [1] \"A9\"  # Vectors also work: get_broad(c(\"A24\", \"A23\", \"A1\")) #> [1] \"A9\" \"A9\" \"A1\""},{"path":"https://lcreteig.github.io/hlapro/reference/get_mismatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine mismatched antigens from typings — get_mismatches","title":"Determine mismatched antigens from typings — get_mismatches","text":"get_mismatches() returns mismatched HLAs given donor recipient HLA typing. , antigens occur donor recipient typing.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_mismatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine mismatched antigens from typings — get_mismatches","text":"","code":"get_mismatches(donor, recipient)"},{"path":"https://lcreteig.github.io/hlapro/reference/get_mismatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine mismatched antigens from typings — get_mismatches","text":"donor, recipient pair strings containing donor recipient HLA typing, respectively. antigen must separated space.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_mismatches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine mismatched antigens from typings — get_mismatches","text":"string mismatched antigens (separated spaces).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_mismatches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine mismatched antigens from typings — get_mismatches","text":"","code":"donor <- \"A1 A2\" recipient <- \"A1 A2\" get_mismatches(donor, recipient) #> [1] \"\" #> \"\" get_mismatches(\"A1 A2\", \"A3 A4\") #> [1] \"A1 A2\" #> \"A1 A2\" get_mismatches(\"A1 A2 B5\", \"A3 A4 B5 B12\") #> [1] \"A1 A2\" #> \"A1 A2\""},{"path":"https://lcreteig.github.io/hlapro/reference/get_positive_eplets.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup and filter eplets unique to positive beads — get_positive_eplets","title":"Lookup and filter eplets unique to positive beads — get_positive_eplets","text":"get_positive_eplets() takes results Luminex single antigen bead assay, extracts eplets occur exclusively positive- negative beads sample. , set eplets negative beads \"subtracted\" set eplets positive beads.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_positive_eplets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup and filter eplets unique to positive beads — get_positive_eplets","text":"","code":"get_positive_eplets(   luminex_df,   sample_col,   alleles_col,   assignment_col,   eplet_df,   pos_col = \"eplets_pos\" )"},{"path":"https://lcreteig.github.io/hlapro/reference/get_positive_eplets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup and filter eplets unique to positive beads — get_positive_eplets","text":"luminex_df Data frame Luminex assay results. sample_col Name column luminex_df containing character vector sample IDs. alleles_col Name column luminex_df containing character vector bead specificities (.e. HLA coated bead). assignment_col Name column luminex_df containing logical vector bead assignment (TRUE = positive, FALSE = negative). eplet_df Data frame containing Eplet Registry; output load_eplet_registry(). pos_col Name new column contain positive-eplets.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_positive_eplets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup and filter eplets unique to positive beads — get_positive_eplets","text":"Data frame two columns, one row eplet: Character vector sample IDs sample_col Character vector eplet names.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/get_positive_eplets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup and filter eplets unique to positive beads — get_positive_eplets","text":"","code":"if (FALSE) { # \\dontrun{ df_eplets <- load_eplet_registry() luminex_df <- dplyr::tribble(   ~sampleID, ~allele, ~positive,   \"001\", \"A*01:01\", TRUE,   \"001\", \"A*02:01\", FALSE,   \"002\", \"A*01:01\", TRUE ) get_positive_eplets(luminex_df, sampleID, allele, positive, df_eplets) } # }"},{"path":"https://lcreteig.github.io/hlapro/reference/get_public.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve public epitope of serological HLA-allele — get_public","title":"Retrieve public epitope of serological HLA-allele — get_public","text":"get_public() takes string character vector HLA alleles. corresponding public epitope (Bw4 Bw6) looked etrl_hla returned. input allele public epitope, NA returned instead.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_public.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve public epitope of serological HLA-allele — get_public","text":"","code":"get_public(allele)"},{"path":"https://lcreteig.github.io/hlapro/reference/get_public.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve public epitope of serological HLA-allele — get_public","text":"allele string character vector () HLA allele(s).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_public.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve public epitope of serological HLA-allele — get_public","text":"string character vector length allele, public epitope one, NA none exists.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_public.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve public epitope of serological HLA-allele — get_public","text":"function uses EuroTransplant Reference Laboratory HLA (etrl_hla) tables lookup. tables define several alleles protein (e.g. HLA-*01:01, HLA-*01:02), serological equivalents. others grouped XX code (HLA-*01:XX), also mapped serological equivalent.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_public.html","id":"workings","dir":"Reference","previous_headings":"","what":"Workings","title":"Retrieve public epitope of serological HLA-allele — get_public","text":"entered alleles first reduced two-field level (see reduce_to_nth_field()). reduced allele occurs lookup table, corresponding rows returned. , converted XX code, row returned. allele already serological broad- split-level, lookup performed using respective columns etrl_hla.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_public.html","id":"exceptions","dir":"Reference","previous_headings":"","what":"Exceptions","title":"Retrieve public epitope of serological HLA-allele — get_public","text":"allele suffix (e.g. HLA-C*01:37N), serological equivalent, hence also return nothing.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/get_public.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve public epitope of serological HLA-allele — get_public","text":"","code":"get_public(\"B14\") # has the epitope (\"Bw6\") #> [1] \"Bw6\" get_public(\"B*15:12\") # has \"Bw6\" #> [1] \"Bw6\" get_public(\"B*15:13\") # but this alleles has \"Bw4\" #> [1] \"Bw4\" get_public(\"B*15:XX\") # hence this is ambiguous (returns `NA`) #> [1] NA  get_public(\"A1\") # does not have the epitope; returns `NA` #> [1] NA  # Vectors also work: get_public(c(\"B14\", \"B63\", \"A1\")) #> [1] \"Bw6\" \"Bw4\" NA"},{"path":"https://lcreteig.github.io/hlapro/reference/get_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the level of resolution of an HLA-allele — get_resolution","title":"Determine the level of resolution of an HLA-allele — get_resolution","text":"get_resolution() takes string character vector HLA alleles, returns resolution either low, intermediate, high.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the level of resolution of an HLA-allele — get_resolution","text":"","code":"get_resolution(allele, extended = FALSE)"},{"path":"https://lcreteig.github.io/hlapro/reference/get_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the level of resolution of an HLA-allele — get_resolution","text":"allele string character vector () HLA allele(s). extended TRUE, returned resolution also contains: high resolution: number fields (\"second field\", \"third field\", \"fourth field\") low resolution: whether allele serological/molecular split/broad associated antigen","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the level of resolution of an HLA-allele — get_resolution","text":"string character vector length allele, \"low\", \"intermediate\", \"high\" element.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_resolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the level of resolution of an HLA-allele — get_resolution","text":"Resolution defined follows: Low: typing allele group level, anything using serological/antigen nomenclature, e.g A2 XX code representing allele group, e.g. *02:XX Intermediate: typing ambiguities, list using forward slash notation, e.g. HLA-*23:26/HLA-*23:39 typing multiple allele codes, e.g. *01:AABJE High: typing 2 field codes, e.g. *24:09 (minimum) HLA-*24:02:01:02L (maximum)","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_resolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the level of resolution of an HLA-allele — get_resolution","text":"","code":"get_resolution(\"A2\") # low #> [1] \"low\" get_resolution(\"A2\", extended = TRUE) # low - broad #> [1] \"serology - broad\" get_resolution(\"A*01:AABJE\") # intermediate #> [1] \"intermediate\" get_resolution(\"A*24:09\") # high #> [1] \"high\" get_resolution(\"A*24:09\", extended = TRUE) # high - second field #> [1] \"high - second field\"  # also works with character vectors, or in a data frame allele_vec <- c(\"A2\", \"A*01:AABJE\", \"B*42:08\") get_resolution(allele_vec) #> [1] \"low\"          \"intermediate\" \"high\"          tidyr::tibble(alleles = allele_vec) |>   dplyr::mutate(resolution = get_resolution(allele_vec)) #> # A tibble: 3 × 2 #>   alleles    resolution   #>   <chr>      <chr>        #> 1 A2         low          #> 2 A*01:AABJE intermediate #> 3 B*42:08    high"},{"path":"https://lcreteig.github.io/hlapro/reference/get_serology.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve serological equivalents of an HLA-allele — get_serology","title":"Retrieve serological equivalents of an HLA-allele — get_serology","text":"get_serology() takes string character vector HLA alleles. corresponding split-level (exists) broad-level (split exists) allele looked etrl_hla returned. alleles exist, NA returned instead.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_serology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve serological equivalents of an HLA-allele — get_serology","text":"","code":"get_serology(allele)"},{"path":"https://lcreteig.github.io/hlapro/reference/get_serology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve serological equivalents of an HLA-allele — get_serology","text":"allele string character vector () HLA allele(s).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_serology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve serological equivalents of an HLA-allele — get_serology","text":"string character vector length allele, corresponding serology exists, NA none exists.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_serology.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve serological equivalents of an HLA-allele — get_serology","text":"function uses EuroTransplant Reference Laboratory HLA (etrl_hla) tables lookup. tables define several alleles protein (e.g. HLA-*01:01, HLA-*01:02), serological equivalents. others grouped XX code (HLA-*01:XX), also mapped serological equivalent.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_serology.html","id":"workings","dir":"Reference","previous_headings":"","what":"Workings","title":"Retrieve serological equivalents of an HLA-allele — get_serology","text":"entered alleles first reduced two-field level (see reduce_to_nth_field()). reduced allele occurs lookup table, corresponding rows returned. , converted XX code, row returned. allele already serological broad- split-level, lookup performed using respective columns etrl_hla.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_serology.html","id":"exceptions","dir":"Reference","previous_headings":"","what":"Exceptions","title":"Retrieve serological equivalents of an HLA-allele — get_serology","text":"allele suffix (e.g. HLA-C*01:37N), serological equivalent, hence also return nothing.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/get_serology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve serological equivalents of an HLA-allele — get_serology","text":"","code":"get_serology(\"A24\") # is a serological split; returns itself (\"A24\") #> [1] \"A24\" get_serology(\"A9\") # is a serological broad; returns itself (\"A9\") #> [1] \"A9\"  get_serology(\"A*01:01:01:50\") # has a broad-level equivalent only (\"A1\") #> [1] \"A1\" get_serology(\"A*23:01:01:11\") # has a split equivalent (\"A23\") #> [1] \"A23\" # as well as a broad (\"A9\"); only the former is returned  # Vectors also work: get_serology(c(\"A24\", \"A*01:XX\", \"B*15:15\")) #> [1] \"A24\" \"A1\"  \"B75\""},{"path":"https://lcreteig.github.io/hlapro/reference/get_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve split-level serological equivalent of an HLA-allele — get_split","title":"Retrieve split-level serological equivalent of an HLA-allele — get_split","text":"get_split() takes string character vector HLA alleles. corresponding split-level allele looked etrl_hla returned. allele exists, NA returned instead.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve split-level serological equivalent of an HLA-allele — get_split","text":"","code":"get_split(allele)"},{"path":"https://lcreteig.github.io/hlapro/reference/get_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve split-level serological equivalent of an HLA-allele — get_split","text":"allele string character vector () HLA allele(s).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve split-level serological equivalent of an HLA-allele — get_split","text":"string character vector length allele, corresponding split exists, NA none exists.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_split.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve split-level serological equivalent of an HLA-allele — get_split","text":"function uses EuroTransplant Reference Laboratory HLA (etrl_hla) tables lookup. tables define several alleles protein (e.g. HLA-*01:01, HLA-*01:02), serological equivalents. others grouped XX code (HLA-*01:XX), also mapped serological equivalent.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_split.html","id":"workings","dir":"Reference","previous_headings":"","what":"Workings","title":"Retrieve split-level serological equivalent of an HLA-allele — get_split","text":"entered alleles first reduced two-field level (see reduce_to_nth_field()). reduced allele occurs lookup table, corresponding rows returned. , converted XX code, row returned. allele already serological broad- split-level, lookup performed using respective columns etrl_hla.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/get_split.html","id":"exceptions","dir":"Reference","previous_headings":"","what":"Exceptions","title":"Retrieve split-level serological equivalent of an HLA-allele — get_split","text":"allele suffix (e.g. HLA-C*01:37N), serological equivalent, hence also return nothing.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/get_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve split-level serological equivalent of an HLA-allele — get_split","text":"","code":"get_split(\"A24\") # is already a split, so returns itself (\"A24\") #> [1] \"A24\" get_split(\"A9\") # is a broad, so returns `NA` #> [1] NA  get_split(\"B*14:01\") # returns corresponding split (\"B64\") #> [1] \"B64\" get_split(\"B*14:02\") # returns corresponding split (\"B65\") #> [1] \"B65\" get_split(\"B*14:03\") # no split is defined for this allele; returns `NA` #> [1] NA  # Vectors also work: get_split(c(\"A24\", \"B*14:01\", \"B*14:03\")) #> [1] \"A24\" \"B64\" NA"},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vector of GL Strings to a data frame with one column per allele — gl_to_df","title":"Convert a vector of GL Strings to a data frame with one column per allele — gl_to_df","text":"gl_to_df() takes character vector GL Strings, transforms wide data frame one row per GL String one column per allele.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vector of GL Strings to a data frame with one column per allele — gl_to_df","text":"","code":"gl_to_df(glstrings)"},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vector of GL Strings to a data frame with one column per allele — gl_to_df","text":"glstrings character vector GL Strings.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a vector of GL Strings to a data frame with one column per allele — gl_to_df","text":"data frame following three columns: glstring_index Counter GL String vector namespace (e.g. \"hla\") version_or_date (e.g. \"3.29.0\" \"2023-05-27\") addition, data frame one column every locus/allele found GL strings (e.g. A_1, A_2, B_1, B_2, C_1, C_2 class typing).","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a vector of GL Strings to a data frame with one column per allele — gl_to_df","text":"","code":"glstrings <-   c(     \"hla#2023#HLA-A*01:01^HLA-B*07:01+HLA-B*08:01^HLA-C*01:01+HLA-C*03:04\",     \"hla#2023#HLA-A*02:01+HLA-A*03:01^HLA-B*07:02+HLA-B*08:02^HLA-C*01:02\"   ) gl_to_df(glstrings) #> # A tibble: 2 × 9 #>   glstring_index namespace version_or_date A_1     A_2   B_1   B_2   C_1   C_2   #>            <int> <chr>     <chr>           <chr>   <chr> <chr> <chr> <chr> <chr> #> 1              1 hla       2023            HLA-A*… NA    HLA-… HLA-… HLA-… HLA-… #> 2              2 hla       2023            HLA-A*… HLA-… HLA-… HLA-… HLA-… NA     # If your GL Strings are in a data frame with some ID'ing columns that you # want to keep attached, call `gl_to_df()` on the GL String column in your # data frame: typing_df <- tidyr::tibble(   id = c(\"001\", \"002\"),   glstrings = c(     \"hla#2023#HLA-A*01:01:01:01+HLA-A*02:07\",     \"hla#2023#HLA-DRB1*03:15:01:01+HLA-DRB1*04:93\"   ) ) typing_df |>   dplyr::mutate(gl_df = gl_to_df(glstrings)) |> # make the data frame   tidyr::unnest(gl_df) # combine with your existing data frame #> # A tibble: 2 × 9 #>   id    glstrings    glstring_index namespace version_or_date A_1   A_2   DRB1_1 #>   <chr> <chr>                 <int> <chr>     <chr>           <chr> <chr> <chr>  #> 1 001   hla#2023#HL…              1 hla       2023            HLA-… HLA-… NA     #> 2 002   hla#2023#HL…              2 hla       2023            NA    NA    HLA-D… #> # ℹ 1 more variable: DRB1_2 <chr>"},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a GL String into metadata and a vector of alleles — gl_to_vec","title":"Split a GL String into metadata and a vector of alleles — gl_to_vec","text":"gl_to_vec() takes GL String converts list containing GL String metadata (namespace, version/data) character vector individual HLA alleles.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a GL String into metadata and a vector of alleles — gl_to_vec","text":"","code":"gl_to_vec(glstring)"},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a GL String into metadata and a vector of alleles — gl_to_vec","text":"glstring valid GL String.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a GL String into metadata and a vector of alleles — gl_to_vec","text":"named list length three containing : namespace (e.g. \"hla\") version_or_date (e.g. \"3.29.0\" \"2023-05-27\") allele_list (e.g. c(\"HLA-*01:01\", \"B*07:08\"))","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/gl_to_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a GL String into metadata and a vector of alleles — gl_to_vec","text":"","code":"# return list that includes the metadata gl_to_vec(\"hla#2018-06#HLA-A*02:69+HLA-A*23:30\") #> $namespace #> [1] \"hla\" #>  #> $version_or_date #> [1] \"2018-06\" #>  #> $allele_list #> [1] \"HLA-A*02:69\" \"HLA-A*23:30\" #>  # access the allele list directly to keep just the vector of HLAs gl_to_vec(\"hla#2018-06#HLA-A*02:69+HLA-A*23:30\")$allele_list #> [1] \"HLA-A*02:69\" \"HLA-A*23:30\""},{"path":"https://lcreteig.github.io/hlapro/reference/hlapro-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hlapro: Tools to Work with HLA Typings and Single-Antigen Bead Assays — hlapro-package","title":"hlapro: Tools to Work with HLA Typings and Single-Antigen Bead Assays — hlapro-package","text":"Provides tools Human Leukocyte Antigen (HLA) data: genotypes well (Luminex) single-antigen bead-based assays. Including: standardizing HLA typings common format (GL Strings), reducing increasing HLA typing resolution, determining bead positivity assessing donor-specific antibodies (DSAs).","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/hlapro-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hlapro: Tools to Work with HLA Typings and Single-Antigen Bead Assays — hlapro-package","text":"Maintainer: Leon Reteig leonreteig@gmail.com (ORCID) contributors: UMC Utrecht [copyright holder, funder]","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/load_eplet_registry.html","id":null,"dir":"Reference","previous_headings":"","what":"Load HLA Eplet Registry table — load_eplet_registry","title":"Load HLA Eplet Registry table — load_eplet_registry","text":"load_eplet_registry() returns dataframe HLA Eplet Registry table, maps HLA alleles eplets. local copy exists, function prompt whether want scrape online registry download fresh copy.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/load_eplet_registry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load HLA Eplet Registry table — load_eplet_registry","text":"","code":"load_eplet_registry(   folder_path = NULL,   filename = \"eplets.rds\",   print_version = TRUE,   return_path = FALSE,   delete = FALSE )"},{"path":"https://lcreteig.github.io/hlapro/reference/load_eplet_registry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load HLA Eplet Registry table — load_eplet_registry","text":"folder_path Character path folder previously downloaded table stored, want new version stored. Defaults R user cache directory. filename Character filename table. print_version Logical indicating whether print message version information loading table. Turn setting FALSE. return_path Logical indicating whether return folder path rather data frame. delete Logical indicating whether delete cached Eplet Registry.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/load_eplet_registry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load HLA Eplet Registry table — load_eplet_registry","text":"Either data frame containing Eplet Registry (default) character string giving path folder /stored (return_path = TRUE).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/load_eplet_registry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load HLA Eplet Registry table — load_eplet_registry","text":"Currently incorporates HLA tables (/B/C, DRB, DQ, DP Interlocus), MICA. N.B. Several eplets occur multiple locus groups. Currently, : 26L, 30H, 37YV, 57V, 77T (DQ, DRB) 28D, 57D (DP, DRB) 76V (DP, DQ) 30G, 77N (ABC, DRB) 56E, 9H (ABC, DP) 9F (ABC, DQ) 9Y (ABC, DP, DQ) eplet names de-duplicated adding locus group square brackets. example, returned dataframe contains 2 eplets name 76V: 76V[DP] 76V[DQ].","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/load_eplet_registry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load HLA Eplet Registry table — load_eplet_registry","text":"","code":"if (FALSE) { # \\dontrun{ # (Down)load the eplet registry (to/)from the default path df_eplets <- load_eplet_registry() # Return the location of the default path load_eplet_registry(return_path = TRUE) # (Down)load the eplet registry (to/)from a custom path and a custom filename df_eplets <- load_eplet_registry(\"~/eplet_registry\", \"eplet_table.rds\") # Delete the saved table load_eplet_registry(\"~/eplet_registry\", \"eplet_table.rds\", delete = TRUE) } # }"},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_alleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup alleles corresponding to eplets in HLA Eplet Registry — lookup_alleles","title":"Lookup alleles corresponding to eplets in HLA Eplet Registry — lookup_alleles","text":"lookup_alleles() takes set eplets, retrieves corresponding HLA alleles Eplet Registry table.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_alleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup alleles corresponding to eplets in HLA Eplet Registry — lookup_alleles","text":"","code":"lookup_alleles(eplet_df, eplets, allele_set = \"luminex\")"},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_alleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup alleles corresponding to eplets in HLA Eplet Registry — lookup_alleles","text":"eplet_df Data frame containing Eplet Registry; output load_eplet_registry(). eplets String character vector Eplet names. allele_set Whether return Luminex alleles (\"luminex\"; default) alleles (\"\").","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_alleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup alleles corresponding to eplets in HLA Eplet Registry — lookup_alleles","text":"Named list, element character vector alleles eplet input.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_alleles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup alleles corresponding to eplets in HLA Eplet Registry — lookup_alleles","text":"","code":"if (FALSE) { # \\dontrun{ df_eplets <- load_eplet_registry() lookup_alleles(df_eplets, \"9F\") lookup_alleles(df_eplets, \"3P\", allele_set = \"all\") # Also works for vectors: lookup_alleles(df_eplets, c(\"9F\", \"3S\")) } # }"},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_eplets.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup eplets corresponding to alleles in HLA Eplet Registry — lookup_eplets","title":"Lookup eplets corresponding to alleles in HLA Eplet Registry — lookup_eplets","text":"lookup_eplets() takes set HLA alleles, retrieves corresponding eplets Eplet Registry table.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_eplets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup eplets corresponding to alleles in HLA Eplet Registry — lookup_eplets","text":"","code":"lookup_eplets(eplet_df, alleles)"},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_eplets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup eplets corresponding to alleles in HLA Eplet Registry — lookup_eplets","text":"eplet_df Data frame containing Eplet Registry; output load_eplet_registry(). alleles String character vector HLA alleles.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_eplets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup eplets corresponding to alleles in HLA Eplet Registry — lookup_eplets","text":"Named list, element character vector eplets allele input.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/lookup_eplets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup eplets corresponding to alleles in HLA Eplet Registry — lookup_eplets","text":"","code":"if (FALSE) { # \\dontrun{ df_eplets <- load_eplet_registry() lookup_eplets(df_eplets, \"A*01:01\") # Also works for vectors: lookup_eplets(df_eplets, c(\"A*01:01\", \"B*08:01\")) } # }"},{"path":"https://lcreteig.github.io/hlapro/reference/read_lum_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a Luminex single-antigen csv file into a data frame — read_lum_csv","title":"Parse a Luminex single-antigen csv file into a data frame — read_lum_csv","text":"read_lum_csv() reads csv raw Luminex results single antigen bead assay, together associated lot file Immucor, returns information therein single data frame.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/read_lum_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a Luminex single-antigen csv file into a data frame — read_lum_csv","text":"","code":"read_lum_csv(csv_filepath, lots_path)"},{"path":"https://lcreteig.github.io/hlapro/reference/read_lum_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a Luminex single-antigen csv file into a data frame — read_lum_csv","text":"csv_filepath character path csv file. lots_path character path folder stores lot-specific file (.eds) kit used run single antigen bead assay. folder contains multiple lot files, right one read automatically (based header csv file).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/read_lum_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a Luminex single-antigen csv file into a data frame — read_lum_csv","text":"data frame (selection ) contents .csv .eds file. contents match table produced loading files Immucor's MATCH !® Antibody Analysis Software.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/read_lum_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a Luminex single-antigen csv file into a data frame — read_lum_csv","text":"","code":"if (FALSE) { # \\dontrun{ dat <- read_lum_csv(\"~/LSA1-001.csv\", \"~/lot_files/\") } # }"},{"path":"https://lcreteig.github.io/hlapro/reference/reduce_to_nth_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate an HLA-allele to a lower field — reduce_to_nth_field","title":"Truncate an HLA-allele to a lower field — reduce_to_nth_field","text":"reduce_to_nth_field() takes string character vector HLA alleles, reduces resolution specified number fields.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/reduce_to_nth_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate an HLA-allele to a lower field — reduce_to_nth_field","text":"","code":"reduce_to_nth_field(allele, n)"},{"path":"https://lcreteig.github.io/hlapro/reference/reduce_to_nth_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate an HLA-allele to a lower field — reduce_to_nth_field","text":"allele string character vector () HLA allele(s). n integer. Can technically anything, function normally something integers 1 3, possible number fields current nomenclature (4 fields maximum therefore reduced).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/reduce_to_nth_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate an HLA-allele to a lower field — reduce_to_nth_field","text":"string character vector length allele, truncated alleles element. Alleles already desired level resolution returned unchanged.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/reduce_to_nth_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate an HLA-allele to a lower field — reduce_to_nth_field","text":"N.B. \"proper\" reduction, simply truncates string last field delimiter (\":\"). take account G P groups, null/alternatively expressed alleles. simply reduced lower field, reduce_to_nth_field() simply strips suffixes anyway.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/reduce_to_nth_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate an HLA-allele to a lower field — reduce_to_nth_field","text":"","code":"reduce_to_nth_field(\"B*07:14:01\", 2) #> [1] \"B*07:14\"  # These won't do anything, as the resolution is equal to `n`: reduce_to_nth_field(\"A2\", 1) #> [1] \"A2\" reduce_to_nth_field(\"B*07:14:01\", 3) #> [1] \"B*07:14:01\"  allele_vec <- c(\"A*01:AABJE\", \"B*42:08\", \"C*01:02:01:26\") reduce_to_nth_field(allele_vec, 1) #> [1] \"A*01\" \"B*42\" \"C*01\""},{"path":"https://lcreteig.github.io/hlapro/reference/reorder_alleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap a pair of HLA-alleles to match another — reorder_alleles","title":"Swap a pair of HLA-alleles to match another — reorder_alleles","text":"reorder_alleles() takes two length-2 character vectors HLA alleles, order, reorders 2nd match 1st. can useful multiple sources HLA typings one individual trying match .","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/reorder_alleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap a pair of HLA-alleles to match another — reorder_alleles","text":"","code":"reorder_alleles(in_order, to_order)"},{"path":"https://lcreteig.github.io/hlapro/reference/reorder_alleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap a pair of HLA-alleles to match another — reorder_alleles","text":"in_order, to_order character vector two HLA alleles certain locus. order to_order reversed, match in_order, necessary.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/reorder_alleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap a pair of HLA-alleles to match another — reorder_alleles","text":"vector alleles to_order, possible reordered.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/reorder_alleles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Swap a pair of HLA-alleles to match another — reorder_alleles","text":"vectors contain alleles different nomenclatures / different resolutions, order determined based scaling resolution. First tries scale 2-field level; still alleles differ , tries serological split level, finally serological broad level.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/reorder_alleles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swap a pair of HLA-alleles to match another — reorder_alleles","text":"","code":"reorder_alleles(in_order = c(\"A1\", \"A2\"), to_order = c(\"A2\", \"A1\")) #> [1] \"A1\" \"A2\" # can accommodate missing/homozygous typings reorder_alleles(in_order = c(\"A1\", NA), to_order = c(\"A2\", \"A1\")) #> [1] \"A1\" \"A2\" # still works if the typings are in a different format/resolution reorder_alleles(in_order = c(\"A1\", \"A2\"), to_order = c(\"A*02:01\", \"A*01:01\")) #> [1] \"A*01:01\" \"A*02:01\""},{"path":"https://lcreteig.github.io/hlapro/reference/strip_redundant.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip redundant alleles from typing string if higher resolution is available — strip_redundant","title":"Strip redundant alleles from typing string if higher resolution is available — strip_redundant","text":"Sometimes typing contain multiple \"versions\" allele different levels resolution. commonly split broad, e.g. A24(9) A10 A25. latter can cause typing contain 2 alleles given locus, handled extract_alleles_str(); former accepted validate_allele(). Besides, broads redundant case, can always added back get_broad(). Sometimes even three \"versions\" included: split, broad, two-field allele, e.g. DR5 DR11 DRB1*11:03.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/strip_redundant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip redundant alleles from typing string if higher resolution is available — strip_redundant","text":"","code":"strip_redundant(typing)"},{"path":"https://lcreteig.github.io/hlapro/reference/strip_redundant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip redundant alleles from typing string if higher resolution is available — strip_redundant","text":"typing string containing HLA allele full space-separated HLA typing.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/strip_redundant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip redundant alleles from typing string if higher resolution is available — strip_redundant","text":"string without redundant alleles input","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/strip_redundant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip redundant alleles from typing string if higher resolution is available — strip_redundant","text":"","code":"strip_redundant(\"A24(9)\") #> [1] \"A24\" strip_redundant(\"A9(24)\") # also works when the split is in parentheses #> [1] \"A24\" strip_redundant(\"A24(9) A10 A25\") # removes both A9 and A10 #> [1] \"A24 A25\" strip_redundant(\"DR5 DR11 DRB1*11:03\") # removes both the split and the broad #> [1] \"DRB1*11:03\" # also works on character vectors strip_redundant(c(\"A24(9)\", \"A25(10)\")) #> [1] \"A24\" \"A25\""},{"path":"https://lcreteig.github.io/hlapro/reference/upscale_typings.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute the resolution of an HLA typing from low to high (second field) — upscale_typings","title":"Impute the resolution of an HLA typing from low to high (second field) — upscale_typings","text":"upscale_typings() takes (vector ) low-resolution HLA typing string(s), \"upscales\" (two-field) high resolution based haplotype frequencies NMDP registry.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/upscale_typings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute the resolution of an HLA typing from low to high (second field) — upscale_typings","text":"","code":"upscale_typings(   filepath,   typings,   loci_input = c(\"A\", \"B\", \"DRB1\", \"DRB.\", \"DQB1\"),   loci_output = c(\"A\", \"B\", \"C\", \"DRB1\", \"DRB.\", \"DQB1\"),   population = \"EURCAU\",   n_haplos = NULL,   n_genos = 1,   as_list = FALSE )"},{"path":"https://lcreteig.github.io/hlapro/reference/upscale_typings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute the resolution of an HLA typing from low to high (second field) — upscale_typings","text":"filepath String path HLA-~C~B~DRB1~DQB1.xlsx file downloaded https://frequency.nmdp.org. typings String character vector HLA typings, space-separated alleles serological notation. loci_input Character vector loci input genotype used upscaling. Must subset c(\"\", \"B\", \"C\", \"DRB1\", \"DRB.\", \"DQB1\"), DRB. DRB3/4/5. one loci occur input typing, ignored. loci_output Character vector loci upscaled, output genotype contain. Can different loci_input, example typing certain locus want infer haplotypes. Must subset c(\"\", \"B\", \"C\", \"DRB1\", \"DRB.\", \"DQB1\"), DRB. DRB3/4/5. population String specifying population group use haplotype frequencies . Must correspond one abbreviations can found https://haplostats.org Defaults \"EURCAU\" (largest population dataset). n_haplos Number frequent haplotypes use upscaling, e.g. 5000 consider 5000 haplotypes highest frequency (rest discarded). Defaults haplotypes non-zero frequency selected population. n_genos Number output genotypes return input genotype, sorted probability (frequency) output genotypes. Defaults likely genotype (.e., 1). as_list Boolean (TRUE FALSE) determines whether return result single dataframe, list dataframes: one input typing (latter can useful input typings also live data frame; see examples).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/upscale_typings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute the resolution of an HLA typing from low to high (second field) — upscale_typings","text":"(list ) dataframe(s) upscaling results, containing following columns: id_input_typing: Sequential identifier input typing id_unphased_geno: Unique identifier output unphased genotype unphased_geno: Upscaled genotype unphased_freq: Frequency upscaled genotype unphased_prob: Probability upscaled genotype phased_freq: Frequency phased genotype (= pair haplotypes) make unphased genotype (can many--one) phased_prob: Probability phased genotype haplo_freq_1: Frequency first haplotype phased genotype haplo_rank_1: Rank (descending) frequency haplotype haplo_freq_2: Frequency 2nd haplotype phased genotype haplo_rank_2: Rank (descending) frequency haplotype","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/upscale_typings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute the resolution of an HLA typing from low to high (second field) — upscale_typings","text":"function uses haplotype frequencies published NMDP https://frequency.nmdp.org. need login accept license obtain data, distribute package.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/upscale_typings.html","id":"imputation-algorithm","dir":"Reference","previous_headings":"","what":"Imputation algorithm","title":"Impute the resolution of an HLA typing from low to high (second field) — upscale_typings","text":"Roughly, function performs following steps: Translate haplotype alleles high-resolution serological equivalents Select compatible haplotypes, .e. haplotypes alleles occur input genotype Combine compatible haplotypes phased genotypes (.e. unique haplotype pairs). Fully homozygous haplotypes considered Calculate frequency probability phased genotypes Combine phased genotypes unique unphased genotypes, calculate frequency probability detailed explanation terminology imputation algorithm, see following references: Geffard et. al., Easy-HLA: validated web application suite reveal full details HLA typing, Bioinformatics, Volume 36, Issue 7, April 2020, Pages 2157-2164, https://doi.org/10.1093/bioinformatics/btz875 Madbouly, ., Gragert, L., Freeman, J., Leahy, N., Gourraud, P.-.-., Hollenbach, J.., Kamoun, M., Fernandez-Vina, M. Maiers, M. (2014), Validation statistical imputation allele-level multilocus phased genotypes ambiguous HLA assignments. Tissue Antigens, 84: 285-292. https://doi.org/10.1111/tan.12390","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/upscale_typings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute the resolution of an HLA typing from low to high (second field) — upscale_typings","text":"","code":"if (FALSE) { # \\dontrun{ upscale_typings(   filepath = \"~/Downloads/A~C~B~DRB3-4-5~DRB1~DQB1.xlsx\",   typing = \"A24 A28 B35 B61 DR4 DR11\" )  # If your GL Strings are in a data frame with some ID'ing columns that you # If you've got more than one typing to upscale, perhaps along with some # ID'ing columns (e.g. patient ID), it's probably best to put them in a # data frame and call `upscale_typings()` on your data frame: library(tidyverse)  typing_df <- tibble(   id = c(\"001\", \"002\"),   input_typings = c(     \"A24 A28 B35 B61 DR4 DR11\",     \"A2 A3 B52 B35 Cw4 DR11 DR52 DQ3\"   ) ) typing_df |>   mutate(geno_df = upscale_typings(     \"~/Downloads/A~C~B~DRB3-4-5~DRB1~DQB1.xlsx\",     input_typings,     as_list = TRUE   )) |>   unnest(geno_df) } # }"},{"path":"https://lcreteig.github.io/hlapro/reference/v2_to_v3.html","id":null,"dir":"Reference","previous_headings":"","what":"v2 to v3 HLA nomenclature conversion table — v2_to_v3","title":"v2 to v3 HLA nomenclature conversion table — v2_to_v3","text":"April 2010, HLA nomenclature officially changed \"v2\" \"v3\", mandates use colons (\":\") delimit fields. example: *01010101 (v2) since written *01:01:01:01. Note though conversions straightforward, number exceptions. conversion table tries collect standard v2 –> v3 conversions different data sources (see ).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/v2_to_v3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"v2 to v3 HLA nomenclature conversion table — v2_to_v3","text":"","code":"v2_to_v3"},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/v2_to_v3.html","id":"v-to-v-","dir":"Reference","previous_headings":"","what":"v2_to_v3","title":"v2 to v3 HLA nomenclature conversion table — v2_to_v3","text":"data frame 5,151 rows 2 columns: v2 v2 version allele v3 v3 version allele","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/v2_to_v3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"v2 to v3 HLA nomenclature conversion table — v2_to_v3","text":"pre-2010 alleles: https://github.com/ANHIG/IMGTHLA/blob/Latest/Nomenclature_2009.txt Additional mappings deleted alleles: https://github.com/ANHIG/IMGTHLA/blob/Latest/Deleted_alleles.txt Allele-specific & DPB1-specific multiple-allele codes (see 4. 5. \"Allele Code Update Version 3 Nomenclature\") https://bioinformatics.bethematchclinical.org/hla-resources/allele-codes/","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/validate_allele.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether an HLA typing is well-formed — validate_allele","title":"Check whether an HLA typing is well-formed — validate_allele","text":"validate_allele() takes character vector string HLA alleles, returns TRUE allele well-formed, FALSE .","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/validate_allele.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether an HLA typing is well-formed — validate_allele","text":"","code":"validate_allele(allele)"},{"path":"https://lcreteig.github.io/hlapro/reference/validate_allele.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether an HLA typing is well-formed — validate_allele","text":"allele string character vector () HLA allele(s).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/validate_allele.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether an HLA typing is well-formed — validate_allele","text":"Boolean logical vector lengths allele, TRUE FALSE element.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/validate_allele.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check whether an HLA typing is well-formed — validate_allele","text":"N.B. function test whether allele actually exists (e.g. whether occurs recent version IPD-IMGT/HLA database), whether string representation conforms certain standards. allele can well-formed exist (e.g. \"*99:01:01\"), can exist well-formed (e.g. \"HLA-**02;01\"). following explicitly considered valid HLAs: alleles belonging loci , B, C, DRB, DQA/DQB, DPA/DPB (exhaustive list class class II HLAs, simply ones often typed context transplantation research/matching) serological/antigen notation, \"A2\", \"DP-0201\" XX codes, e.g. \"*02:XX\" prefixing allele \"HLA-\" allowed ambiguous alleles \"C*01:02/C*01:03/C*01:04/C*01:05/C*01:06\" Multiple Allele Codes, e.g. \"DRB1*07:GC\" (v3) \"DPB1*04BDVU\" (v2) P groups, G groups, expression-related suffixes (N/L/S/C//Q)","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/validate_allele.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether an HLA typing is well-formed — validate_allele","text":"","code":"validate_allele(\"A2\") #> [1] TRUE validate_allele(\"A*99:01:01\") # well-formed but non-existing #> [1] TRUE validate_allele(\"HLA-A**02;01\") # existing but not well-formed #> [1] FALSE  # also works with character vectors, or in a data frame allele_vec <- c(\"A2\", \"A*01:AABJE\", \"A*24:02:01:02L\", \"not-an-HLA\") validate_allele(allele_vec) #> [1]  TRUE  TRUE  TRUE FALSE  df <- tidyr::tibble(alleles = allele_vec) dplyr::mutate(df, alleles_check = validate_allele(alleles)) #> # A tibble: 4 × 2 #>   alleles        alleles_check #>   <chr>          <lgl>         #> 1 A2             TRUE          #> 2 A*01:AABJE     TRUE          #> 3 A*24:02:01:02L TRUE          #> 4 not-an-HLA     FALSE"},{"path":"https://lcreteig.github.io/hlapro/reference/vec_to_gl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vector of HLA alleles to a GL String — vec_to_gl","title":"Convert a vector of HLA alleles to a GL String — vec_to_gl","text":"vec_to_gl() constructs GL String character vector HLAs, well metadata (namespace, version/data).","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/vec_to_gl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vector of HLA alleles to a GL String — vec_to_gl","text":"","code":"vec_to_gl(allele_list, namespace = \"hla\", version_or_date = NULL)"},{"path":"https://lcreteig.github.io/hlapro/reference/vec_to_gl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vector of HLA alleles to a GL String — vec_to_gl","text":"allele_list character vector HLA alleles. namespace Specification HLA nomenclature system. Defaults \"hla\". version_or_date Specification version namespace used, date GL String constructed. specified, uses today's date default.","code":""},{"path":"https://lcreteig.github.io/hlapro/reference/vec_to_gl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a vector of HLA alleles to a GL String — vec_to_gl","text":"valid GL String.","code":""},{"path":[]},{"path":"https://lcreteig.github.io/hlapro/reference/vec_to_gl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a vector of HLA alleles to a GL String — vec_to_gl","text":"","code":"vec_to_gl(c(\"A*02:302\", \"A*23:26/A*23:39\", \"B*44:02:13\", \"B*49:08\")) #> [1] \"hla#2024-12-02#HLA-A*02:302+HLA-A*23:26/A*23:39^HLA-B*44:02:13+HLA-B*49:08\" vec_to_gl(   allele_list = c(\"HLA-A*02:69\", \"HLA-A*23:30\"),   namespace = \"hla\", version_or_date = \"2018-06\" ) #> [1] \"hla#2018-06#HLA-A*02:69+HLA-A*23:30\""},{"path":"https://lcreteig.github.io/hlapro/news/index.html","id":"hlapro-development-version","dir":"Changelog","previous_headings":"","what":"hlapro (development version)","title":"hlapro (development version)","text":"Update clean_hla() also convert pre-2010 typings (v2) current nomenclature (v3)","code":""},{"path":"https://lcreteig.github.io/hlapro/news/index.html","id":"hlapro-030","dir":"Changelog","previous_headings":"","what":"hlapro 0.3.0","title":"hlapro 0.3.0","text":"New read_lum_csv() function parse raw Luminex Single-Antigen Bead assay data Fixed tests new release HLA Eplet registry (2024-08-19)","code":""},{"path":"https://lcreteig.github.io/hlapro/news/index.html","id":"hlapro-023","dir":"Changelog","previous_headings":"","what":"hlapro 0.2.3","title":"hlapro 0.2.3","text":"Fixed tests new release HLA Eplet registry (2024-03-15)","code":""},{"path":"https://lcreteig.github.io/hlapro/news/index.html","id":"hlapro-022","dir":"Changelog","previous_headings":"","what":"hlapro 0.2.2","title":"hlapro 0.2.2","text":"Updated new release HLA Eplet registry: incorporating papers Bezstarosti et al. Osoegawa et al. (#11)","code":""},{"path":"https://lcreteig.github.io/hlapro/news/index.html","id":"hlapro-021","dir":"Changelog","previous_headings":"","what":"hlapro 0.2.1","title":"hlapro 0.2.1","text":"Fixed check input_loci argument upscale_typings() (#10).","code":""},{"path":"https://lcreteig.github.io/hlapro/news/index.html","id":"hlapro-020","dir":"Changelog","previous_headings":"","what":"hlapro 0.2.0","title":"hlapro 0.2.0","text":"New functions lookup eplets/alleles HLA Eplet registry. Updated release “2024-01-22: IPD-IMGT/HLA 3.54” registry (#9) load_eplet_registry() scrapes database website, loads existing version disk lookup_alleles() lookup_eplets() return eplets occur input vector HLA alleles, vice versa. get_positive_eplets() returns eplets occur positive (negative) beads dataframe Luminex results. New upscale_typings() function impute high-resolution (two-field) genotypes low resolution serological input typing, based haplotype frequencies released NMDP New gl_to_df() df_to_gl() functions convert data frame one column per allele GL String containing alleles. New clean_hla() function correct common formatting issues HLA allele typing strings. New functions get serological equivalents allele ETRL HLA tables. tables also shipped package etrl_hla data frame: get_serology() split else broad-level serology get_broad() broad-level serology get_split() split-level serology get_public() Bw4 Bw6 epitope New validate_alleles() check whether (n) (list ) HLA allele(s) well-formed New get_resolution() determine resolution (n) (list ) HLA allele(s) either low, intermediate, high. New extract_alleles_str(), extract_alleles_df() gets alleles locus HLA typing string, separates named list elements / new columns data frame. Use count_alleles() inspect number alleles per locus. extract_alleles()_* functions also use count_alleles() warn whenever encounter typing two alleles per locus.","code":""},{"path":"https://lcreteig.github.io/hlapro/news/index.html","id":"hlapro-010","dir":"Changelog","previous_headings":"","what":"hlapro 0.1.0","title":"hlapro 0.1.0","text":"New get_mismatches() determines mismatched antigens pair donor/recipient typings.","code":""}]
